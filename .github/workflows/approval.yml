# This is a basic workflow to help you get started with Actions

name: tf-approval

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches:
      - feature/mpctf-137
  issue_comment:
    types: [created]
    # paths:
    # - 'dev.yaml'
    # - '.github/workflows/main.yml'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  resource_validation:
    runs-on: ubuntu-latest
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Create an issue
        if: ${{ github.event.comment.body != 'Approved' && 5 > 4 }}
        uses: JasonEtco/create-an-issue@v2.6.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUNNUMBER: ${{ github.run_number }}
        with:
          filename: .github/deployment-approval.md
  
  pending_for_approval:
    needs: [resource_validation]
    if: ${{ !github.event.issue.pull_request && github.event.comment.body == 'Approved'}}
    runs-on: ubuntu-latest
    steps:
      - name: Comment on Issue
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: 'Deployment Initiated'

      - name: Get Issue Data
        uses: peter-murray/issue-body-parser-action@v1
        id: issue_body_parser
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_id: ${{ github.event.issue.number }}
          payload_marker: target_payload

  
  
  
  
  
  
  
  
  
  
  
  
  parse:
    if: ${{ github.event.comment.body == 'Approved'}}
    runs-on: ubuntu-latest
    outputs: 
      ci-run-number: ${{ fromJSON(steps.issue_body_parser.outputs.payload).runNumber }}
    steps:
      - name: Comment on Issue
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: 'Deployment Initiated'

      - name: Get Issue Data
        uses: peter-murray/issue-body-parser-action@v1
        id: issue_body_parser
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_id: ${{ github.event.issue.number }}
          payload_marker: target_payload

  verify:
    needs: [parse]
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install yq tool
        run: |
          wget --no-verbose --quiet https://github.com/mikefarah/yq/releases/download/v4.24.4/yq_linux_386.tar.gz -O - |\
          tar xz && sudo mv yq_linux_386 /usr/bin/yq
      - name: Install Python pip
        run: |
          sudo apt-get -qq -y update > /dev/null
          sudo apt-get -qq -y install python3-pip > /dev/null
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        # with:
        #   terraform_version: 1.1.8

      - name: Create config.json file
        run: |
          export ENV=$(yq eval --output-format=json dev.yaml | jq -r '.Env')
          export APP=$(yq eval --output-format=json dev.yaml | jq -r '.ApplicationName')
          export TF_STATE_FILE_NAME="$ENV-$APP.json"
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "APP=$APP" >> $GITHUB_ENV
          echo '{
            "resource_group_name": "'${TF_STATE_SA_RG_NAME}'",
            "storage_account_name": "'${TF_STATE_SA_NAME}'",
            "container_name": "'${TF_STATE_SA_CONTAINER_NAME}'",
            "subscription_id": "'${SUB_ID_LZ1}'",
            "access_key": "'${ARM_ACCESS_KEY}'",
            "key":  "'$TF_STATE_FILE_NAME'",
            "tenant_id" : "'${ARM_TENANT_ID}'"
            }' > tf.backend.config.json
          echo '{
            "subscription_id": "'${ARM_SUBSCRIPTION_ID}'",
            "tenant_id" : "'${ARM_TENANT_ID}'",
            "client_id": "'${ARM_CLIENT_ID}'",
            "client_secret": "'${ARM_CLIENT_SECRET}'"
            }' > tf.creds.config.json
          mkdir $ENV
          cp tf.backend.config.json $ENV/tf.backend.config.json
          cp tf.creds.config.json $ENV/tf.creds.config.json
      # Runs a set of commands using the runners shell
      - name: Convert Input file in JSON and create TF Modules structure
        run: |
          rm -f main.tf $ENV.yaml.json
          ls -ltr
          pip install --quiet --no-color --requirement ./py_scripts/requirements.txt
          python ./py_scripts/create_module.py dev.yaml
          cp py_scripts/provider.tf $ENV/provider.tf
          cp main.tf $ENV/main.tf
          ls -ltr
          ls -ltr $ENV
          cat $ENV/main.tf
      - name: Run Terraform Init
        run: |
          terraform -chdir="$ENV" init --backend-config tf.backend.config.json
      # - name: Run Terraform Format Validation
      #   run: |
      #     terraform fmt --check --recursive

      - name: Run Terraform Validate
        run: |
          terraform -chdir="$ENV" validate
      - name: Run Terraform Plan
        run: |
          terraform -chdir="$ENV" plan -var-file="tf.creds.config.json"